// Generated by CoffeeScript 1.4.0
(function() {
  var can, charm, ids, render, renderAll,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    _this = this;

  can = require('../can');

  charm = require('charm')();

  charm.pipe(process.stdout);

  charm.reset();

  ids = [450, 389, 803, 382, 283, 485, 103];

  renderAll = function() {
    var msg, row, _i, _len, _ref, _results;
    _ref = can.Message.all();
    _results = [];
    for (row = _i = 0, _len = _ref.length; _i < _len; row = ++_i) {
      msg = _ref[row];
      if (msg.needsRender) {
        _results.push(render(msg, row + 1));
      }
    }
    return _results;
  };

  render = function(msg, row) {
    var idx, pair, _i, _len, _ref,
      _this = this;
    charm.position(1, row);
    if (msg.needsRender) {
      msg.needsRender = false;
    }
    charm.foreground('green').write(msg.arbId).column(5).erase('end');
    _ref = msg.dataBytes();
    for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
      pair = _ref[idx];
      if (__indexOf.call(msg.newBytes, idx) >= 0) {
        charm.foreground('cyan');
      } else {
        charm.foreground('blue');
      }
      charm.write(pair).right(1);
    }
    charm.position(40, row).foreground('red').write(msg.charData());
    return setTimeout(function() {
      return charm.position(5, row).foreground('blue').right(30);
    }, 50);
  };

  setInterval(function() {
    var arbId, byte, i, id, lastInstance, msg, rand1, _i, _j, _len;
    for (_i = 0, _len = ids.length; _i < _len; _i++) {
      id = ids[_i];
      msg = id.toString();
      rand1 = Math.floor((Math.random() * 6) + 1);
      for (i = _j = 0; 0 <= rand1 ? _j <= rand1 : _j >= rand1; i = 0 <= rand1 ? ++_j : --_j) {
        byte = Math.floor(Math.random() * 256);
        msg = msg + byte.toString(16);
      }
      arbId = can.Factory.parseArbId(msg);
      lastInstance = can.Message.find(arbId);
      if (lastInstance != null) {
        lastInstance.update(msg);
      } else {
        can.Factory.createMessage(msg);
      }
    }
    return renderAll();
  }, 1000);

}).call(this);
