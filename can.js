// Generated by CoffeeScript 1.4.0
(function() {
  var CanFactory, CanMessage, ClockMessage, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('underscore');

  CanMessage = (function() {

    CanMessage.messageList = [];

    CanMessage.all = function() {
      return this.messageList;
    };

    CanMessage.find = function(arbId) {
      return _.find(this.messageList, function(msg) {
        return msg.arbId === arbId;
      });
    };

    function CanMessage(message) {
      var insertIndex;
      this.arbId = message.slice(0, 3);
      this.data = message.slice(3);
      this.needsRender = true;
      this.newBytes = [];
      insertIndex = _.sortedIndex(CanMessage.messageList, this, function(msg) {
        return parseInt(msg.arbId, 16);
      });
      CanMessage.messageList.splice(insertIndex, 0, this);
      _.each(_.rest(CanMessage.messageList, insertIndex + 1), function(msg) {
        return msg.needsRender = true;
      });
    }

    CanMessage.prototype.update = function(message) {
      var idx, newBytes, oldBytes, _i, _ref;
      this.newBytes = [];
      oldBytes = this.dataBytes();
      newBytes = message.slice(3).match(/.{2}/g);
      for (idx = _i = 0, _ref = oldBytes.length; 0 <= _ref ? _i <= _ref : _i >= _ref; idx = 0 <= _ref ? ++_i : --_i) {
        if (oldBytes[idx] !== newBytes[idx]) {
          this.newBytes.push(idx);
        }
      }
      this.data = message.slice(3);
      return this.needsRender = true;
    };

    CanMessage.prototype.charData = function() {
      var byte, int, str, _i, _len, _ref;
      str = '';
      _ref = this.dataBytes();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        byte = _ref[_i];
        int = parseInt(byte, 16);
        if ((33 <= int && int <= 126)) {
          str = "" + str + (String.fromCharCode(int));
        } else {
          str = "" + str + ".";
        }
      }
      return str;
    };

    CanMessage.prototype.dataBytes = function() {
      return this.data.match(/.{2}/g);
    };

    CanMessage.prototype.toString = function() {
      return "" + this.arbId + ": " + this.data + " " + (this.charData());
    };

    return CanMessage;

  })();

  ClockMessage = (function(_super) {

    __extends(ClockMessage, _super);

    function ClockMessage() {
      return ClockMessage.__super__.constructor.apply(this, arguments);
    }

    ClockMessage.prototype.charData = function() {
      var bytes, str;
      str = '';
      bytes = _.map(this.dataBytes(), function(byte) {
        return parseInt(byte, 16).toString();
      });
      return "" + bytes[1] + "/" + bytes[2] + "/" + bytes[0] + " " + bytes[3] + ":" + bytes[4] + ":" + bytes[5];
    };

    return ClockMessage;

  })(CanMessage);

  CanFactory = (function() {

    function CanFactory() {}

    CanFactory.parseArbId = function(message) {
      return message.slice(0, 3);
    };

    CanFactory.createMessage = function(message) {
      switch (this.parseArbId(message)) {
        case '520':
          return new ClockMessage(message);
        default:
          return new CanMessage(message);
      }
    };

    return CanFactory;

  })();

  module.exports = {
    Factory: CanFactory,
    Message: CanMessage,
    ClockMessage: ClockMessage
  };

}).call(this);
