// Generated by CoffeeScript 1.7.1
(function() {
  var CanMessage, SerialPort, charm, messageList, pos, serialport, sp;

  charm = require('charm')();

  serialport = require('serialport');

  SerialPort = serialport.SerialPort;

  sp = new SerialPort('/dev/tty.OBDLinkMX-STN-SPP', {
    parser: serialport.parsers.readline('\r')
  });

  messageList = {};

  pos = 1;

  CanMessage = (function() {
    CanMessage.parseArbId = function(message) {
      return message.slice(0, 3);
    };

    function CanMessage(message) {
      this.arbId = message.slice(0, 3);
      this.data = message.slice(3);
      this.pos = pos++;
    }

    CanMessage.prototype.update = function(message) {
      return this.data = message.slice(3);
    };

    CanMessage.prototype.charData = function() {
      var byte, int, str, _i, _len, _ref;
      str = '';
      _ref = this.dataPairs();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        byte = _ref[_i];
        int = parseInt(byte, 16);
        if ((33 <= int && int <= 126)) {
          str = "" + str + (String.fromCharCode(int));
        } else {
          str = "" + str + ".";
        }
      }
      return str;
    };

    CanMessage.prototype.dataPairs = function() {
      return this.data.match(/.{2}/g);
    };

    CanMessage.prototype.render = function() {
      var pair, _i, _len, _ref;
      charm.position(0, this.pos).foreground('blue').write(this.arbId).right(1).foreground('green');
      _ref = this.dataPairs();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pair = _ref[_i];
        charm.write(pair).right(1);
      }
      return charm.foreground('red').position(40, this.pos).write(this.charData());
    };

    CanMessage.prototype.toString = function() {
      return "" + this.arbId + ": " + this.data + " " + (this.charData());
    };

    return CanMessage;

  })();

  sp.on('open', function() {
    charm.pipe(process.stdout);
    charm.reset();
    return sp.on('data', function(message) {
      var arbId, lastInstance, msg;
      arbId = CanMessage.parseArbId(message);
      lastInstance = messageList[arbId];
      if (lastInstance != null) {
        lastInstance.update(message);
        return lastInstance.render();
      } else {
        msg = new CanMessage(message);
        messageList[msg.arbId] = msg;
        return msg.render();
      }
    });
  });

}).call(this);
